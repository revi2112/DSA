class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        int res = Integer.MAX_VALUE;
        // brute force O(n^2)
        // for(int i =0; i<nums.length; i++){
        //     int sum = 0;
        //     for(int j = i; j<nums.length; j++){
        //         sum += nums[j];
        //         if(sum >= target){
        //             res = Math.min(res, (j-i+1));
        //             break;
        //         }
        //     }
        // }

        // return (res == Integer.MAX_VALUE) ? 0: res;

        // O(N), two pointer
        // here i am resting the sum and index 

        int start = 0;
        int end = 0; 
        int sum = 0;
        while(start<nums.length && end <nums.length){
            sum += nums[end];

            if(sum >= target){
                res = Math.min(res, (end-start+1));
                start += 1;
                end = start;
                sum =0;
            }
            else{
                end+=1;
            }
        }

        // O(N) Sliding window
        // little more optimised - let the window summ still be there and move the start index and reduce the sum without having to clculate the sum again

        int start = 0;
        int sum = 0;

        for(int end = 0; end< nums.length; end ++){
            sum += nums[end];
            // move end untill sum>=targ
            if(sum >= target){
                res = Math.min(res, (end-start+1));
                sum -=nums[i++]; // shift start of window
            }

        }

        return (res == Integer.MAX_VALUE) ? 0: res;
        
    }
}
